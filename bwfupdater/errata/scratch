# ADD iXML to file

			dir = os.path.dirname(__file__)
			xmlFileName = os.path.join(dir, 'iXMLspec.xml')

			xmlfile = open(xmlFileName, 'rb')
			xmlByteArray = bytearray(xmlfile.read())
			# print xmlByteArray
			print "length:",len(xmlByteArray)

			if len(xmlByteArray) % 2 == 0:
				print "EVEN"
				print xmlByteArray
			else:
				print "ODD"
				xmlByteArray.append(0)
				# print xmlByteArray
				# print "after length:",len(xmlByteArray)

			chunkToAdd = {'chunkSize':len(xmlByteArray), 'chunkName':bytearray("iXML"), 'chunkData':xmlByteArray}

			# wavefile.addChunkAndUpdateSize(filename, chunkToAdd)	



print '{:0>2}'.format(1)

print '''
remaining work:
A) Update Time TimeCode

1) Need to add iXML chunk to files
	a) update RIFF size
	b) update RF64 size
	c) will NOT write iXML should iXML take file over 4GBs

2) Update TimeCode
	a) make sure I don't need to update the REGN in the file

3) Export Info to XML

4) Command Line Parser

'''

# application -i file -o .xml
# application -t "01:01:01:01" -b 2398 -ixml file





	# result = convertUnsignedLongLongToTimeCode(165765600, 48000,30)
	# print result, "Timecode"

	timeReference = struct.pack("<Q", convertTimeCodeToUnsignedLongLong("00:59:30:00", 48000, 30))
	with open(os.path.expanduser("~/Desktop/test.bin"), 'w+') as f:
		f.write(timeReference)

	print convertTimeCodeToUnsignedLongLong30("23:59:59:29", (48000*4))
	# timeReference = struct.pack("<Q", convertTimeCodeToUnsignedLongLong30("23:59:59:29", (48000*4)))
	# with open(os.path.expanduser("~/Desktop/Test_Samples_2398_ST12.wav"), 'r+b') as f:
	# 	f.seek(458)
	# 	f.write(timeReference)	
	# dropFrameTest()



# to do - grab the array from each analysis
# { "0":0,"1":0,"2":0,"3":0,"4":0,"5":0, "max":(pow(2,23)*numberOfSamples), "samplesToReadBlockSize":samplesToReadBlockSize }
# collect all the samples
# perform covariance of tracks 01, 23, 45
# we want a class that accumulates analyses for each sample
# then performs operations on those array

# 57:30 should start
# 

# 1) bext start time,
# 2) channel configuration
# 3) before and after 


#Errata
# loudestAndLowestTrack = ["".join([list(elem)[0],list(elem)[-1]]) for elem in self.trackOrders[2:-3]]
# countOfAnaylses = len(loudestAndLowestTrack)
# c = Counter(loudestAndLowestTrack)
# logging.info("{}".format(c.most_common()))

# logging.info("-----Track Spread---")
# for elem in c.most_common():
# 	percentage = (1. * elem[1])/countOfAnaylses * 100
# 	logging.info("{} at %{}".format(elem[0], percentage))

# highestElement = c.most_common(1)
# print highestElement
# highestProbability = ((1. * highestElement[0][1])/countOfAnaylses) * 100
# if highestProbability > 50:
# 	logging.info("likely location of center and sub is {} with {} probability".format(highestElement[0][0], highestProbability))


# logging.info("----InterTrackSpreads------")

# loudestPairing = [max(elem.iteritems(), key=operator.itemgetter(1))[0] for elem in self.interTrackDifferences]
# c = Counter(loudestPairing)
# logging.info(c.most_common())


def info():

	filePath = None
	try:
		filePath = sys.argv[1]
	except Exception:
		print "No file specified"
		return

	if os.path.isdir(filePath):
		for path, dirs, files in os.walk(filePath):
		    for name in files:
		    	fullpath = os.path.join(path, name)
		    	wavefile = PCWaveFile(fullpath)
		    	wavefile.info()
	else:
		wavefile = PCWaveFile(filePath)
		wavefile.info()

def timecodeinfo():

	filePath = None
	try:
		filePath = sys.argv[1]
	except Exception:
		print "No file specified"
		return

	if os.path.isdir(filePath):
		for path, dirs, files in os.walk(filePath):
		    for name in files:
		    	fullpath = os.path.join(path, name)
		    	print fullpath
		    	print listOfTimeCodeValuesForFile(fullpath)
	else:
		print listOfTimeCodeValuesForFile(filePath)